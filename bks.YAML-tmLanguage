# [PackageDev] target_format: plist, ext: tmLanguage
---
name: BKEngine Script
scopeName: source.bks
fileTypes: [bkscr]
uuid: 175fdd22-a5a7-4c19-ae73-70202832c212
patterns:
- include: '#comment'

# MATCH *start
- name: label.bks
  match: ^(\s*)\*(\s*)(?:(register|main)|(\w+))
  captures:
    '0': {name: string.other.link.bks}
    '1': {name: invalid.illegal.bks}
    '2': {name: invalid.illegal.bks}
    '3': {name: keyword.storage}

# MATCH [sprite index=...] 
- name: instruction.square.bks
  begin: \[(\s*)(?:(import|macro|return(?:to)?|if|else(?:if)?|endif|for|continue|break|next)|(\w+))
  beginCaptures:
    '1': {name: invalid.illegal.bks}
    '2': {name: keyword.control.bks}
    '3': {name: entity.name.tag.bks}
  end: \]
  patterns:
  - include: '#instruction_content'

# MATCH @sprite index=... 
- name: instruction.line.bks
  begin: \@(\s*)(?:(import|macro|return(?:to)?|if|else(?:if)?|endif|for|continue|break|next)|(\w+))
  beginCaptures:
    '1': {name: invalid.illegal.bks}
    '2': {name: keyword.control.bks}
    '3': {name: entity.name.tag.bks}
  end: \n
  patterns:
  - include: '#instruction_content'

# MATCH #var a=12;
- name: bkscript.line.bks
  begin: ^(\s*)#(?=[^#])
  end: \n
  patterns:
  - include: '#raw_code'

# MATCH ## <raw_code> ##
- name: bkscript.block.bks
  begin: ^##+
  end: ^##+
  patterns:
  - include: '#raw_code'

repository:
  instruction_content:
    patterns:
    - include: '#instruction_attribute'
    - include: '#string'
    - include: '#number'
    - include: '#boolean'
    - name: support.constant.bks
      match: \b(basic_layer|message_layer)\b
    - name: keyword.operator.bks
      match: (\s*)=(\s*)
      captures:
        '1': {name: invalid.illegal.bks}
        '2': {name: invalid.illegal.bks}
    - name: array.bks
      begin: \[
      end: \]
      patterns:
      - include: '#number'
      - include: '#string'

  instruction_api:
    patterns:
    - name: entity.name.tag.bks
      match: \b(sprite(opt)?|addto|layer|remove(all)?|((info|button|slider|checkbox)(ex)?)|anchor|zorder|bgm|se|voice|stop|volume|pause|resume|fade|(text(cursor|window|on|off|speed|style|tag|sprite)?)|locate|i|b|s|u|r|l|p|er|ruby|messagelayer|((store|restore)font)|action|eval|jump|call|return|returnto|if|else(if)?|endif|tablegoto|for|continue|break|next|(wait((all)?action|button|bgm|fade|trans|se|voice)?)|(stop((all)?action|(all)?trans))|click|inputbox|(pre)?trans|(delete)?event|quit|idlesp|history|fileexist|save(point|toimage)?|load|screenshot)\b

  instruction_special_api:
    patterns:
    - name: entity.name.tag.special.bks
      match: \b(macro|import)\b

  instruction_attribute:
    patterns:
    - name: entity.other.attribute-name.bks
      match: \s+\w+

  raw_code:
    patterns:
    - include: '#number'
    - include: '#string'
    - include: '#boolean'
    - include: '#line_comment'
    - include: '#block_comment'
    - name: storage.type.bks
      match: \b(var|number|char|string|array|dictionary|class)\b
    - name: storage.modifier.bks
      match: \b(global|propset|delete)\b
    - name: keyword.operator.bks
      match: \+|\-|\*|/|%|^|&&|\|\||!|\+\+|\-\-|=|\+=|\-=|\*=|/=|%=|\^=|<|>|==|!=|<=|>=|\||&|:|=>
    - name: keyword.control.bks
      match: \b(for|foreach|in|if|else|do|while|return|break|continue|case)\b
    - name: support.class.bks
      match: \b(Date|Math|Regex|Script|System|SaveData|Channel|History|Sprite|Timer|DownloadManager|Json|Network)\b
    - name: support.function.bks
      match: \b(log|typeof|print|eval|range|random|itoa|itoa2|time|hash|hash16|saveFile|loadFile|appendFile|evalFile|toString|fileExist)\b
    - name: punctuation.terminator.statement.bks
      match: \;
    - name: meta.delimiter.method.period.bks
      match: \.
    - name: meta.brace.round.bks
      match: \(|\)
    - name: meta.brace.square.bks
      match: \[|\]
    - name: meta.brace.curly.bks
      match: \{|\}
    - name: meta.function.bks
      match: \b(function)\s+([a-zA-Z_$]\w*)?\s*(\()(.*?)(\))
      captures:
        '1': {name: storage.type.function.bks}
        '2': {name: entity.name.function.bks}
        '3': {name: punctuation.definition.parameters.begin.bks}
        '4': {name: variable.parameter.function.bks}
        '5': {name: punctuation.definition.parameters.end.bks}
  
  number:
    name: constant.numeric.bks
    match: \b((0(x|X)[0-9a-fA-F]+)|([0-9]+(\.[0-9]+)?))\b
  
  string:
    patterns:
    - include: '#single_quoted_string'
    - include: '#double_quoted_string'
  single_quoted_string:
    name: string.quoted.single.bks
    begin: "'"
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.bks}
    end: "'"
    endCaptures:
      '0': {name: punctuation.definition.string.end.bks}
    patterns:
    - name: constant.character.escape.bks
      match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)
  double_quoted_string:
    name: string.quoted.double.bks
    begin: '"'
    beginCaptures:
      '0': {name: punctuation.definition.string.begin.bks}
    end: '"'
    endCaptures:
      '0': {name: punctuation.definition.string.end.bks}
    patterns:
    - name: constant.character.escape.bks
      match: \\(x\h{2}|[0-2][0-7]{,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)

  comment: 
    patterns:
    - include: '#line_comment'
    - include: '#line_comment2'
    - include: '#block_comment'
  line_comment:
    name: comment.line.double-slash.bks
    comment: // .....
    match: (//).*$\n?
    captures:
      '1': {name: punctuation.definition.comment.bks}
  line_comment2:
    name: comment.line.colon.bks
    comment: ; ......
    match: ^(;).*$\n?
    captures:
      '1': {name: punctuation.definition.comment.bks}
  block_comment:
    name: comment.block.bks
    comment: /* ..... */
    begin: /\*
    captures:
      '0': {name: punctuation.definition.comment.bks}
    end: \*/

  boolean:
   patterns:
    - name: constant.language.boolean.true.bks
      match: \btrue\b
    - name: constant.language.boolean.false.bks
      match: \bfalse\b
...